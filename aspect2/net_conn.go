// Automatically generated by AspectGo (github.com/Jakegogo/aspectgo)
// DO NOT EDIT MANUALLY

package aspect2

import "agaspect/netconnaspect"
import aspectrt "github.com/Jakegogo/aspectgo/aspect/rt"

import (
	"fmt"
	"go_test/aspect3"
	"net"
	"os"
	"strconv"
)

func MockComposite() {
	c1 := &aspect3.Comp{}
	c1.Call()
}

func CallDial() {
	host := "100.65.4.24"
	port := 80

	conn, err := (_aspect_proxy_0_Dial_of())("tcp", host+":"+strconv.Itoa(port))
	fmt.Println("Connecting to " + host + ":" + strconv.Itoa(port))
	if err != nil {
		fmt.Println("Error connecting:", err)
		os.Exit(1)
	}
	defer conn.Close()

	conn.RemoteAddr()

	content := []byte{1, 2, 3}
	count1, err := (_aspect_proxy_1_Write_of(conn))(content)

	fmt.Println(count1)
}

func _proxy_0_Dial_of(_network string, _address string) ( net.Conn,  error) {
	_ag_res := (&netconnaspect.NetConnAspect{}).Advice(&aspectrt.ContextImpl{XArgs: []interface {
	}{_network, _address}, XFunc: func(_ag_args []interface {
	}) []interface {
	} {
		_ag_arg0, _ := _ag_args[0].(string)
		_ag_arg1, _ := _ag_args[1].(string)
		_ag_res0, _ag_res1 := net.Dial(_ag_arg0, _ag_arg1)
		_ag_res := []interface {
		}{_ag_res0, _ag_res1}
		return _ag_res
	}, XReceiver: nil})
	_ = _ag_res
	_ag_res0, _ := _ag_res[0].(net.Conn)
	_ag_res1, _ := _ag_res[1].(error)
	return _ag_res0, _ag_res1
}

func _aspect_proxy_0_Dial_of() func(string, string) (net.Conn, error) {
	return func(_network string, _address string) ( net.Conn,  error) {
		return _proxy_0_Dial_of(_network, _address)
	}
}

func _proxy_1_Write_of(_ag_recv net.Conn, _b []byte) (n int, err error) {
	_ag_res := (&netconnaspect.NetConnWriteAspect{}).Advice(&aspectrt.ContextImpl{XArgs: []interface {
	}{_b}, XFunc: func(_ag_args []interface {
	}) []interface {
	} {
		_ag_arg0, _ := _ag_args[0].([]byte)
		_ag_res0, _ag_res1 := _ag_recv.Write(_ag_arg0)
		_ag_res := []interface {
		}{_ag_res0, _ag_res1}
		return _ag_res
	}, XReceiver: _ag_recv})
	_ = _ag_res
	_ag_res0, _ := _ag_res[0].(int)
	_ag_res1, _ := _ag_res[1].(error)
	return _ag_res0, _ag_res1
}

func _aspect_proxy_1_Write_of(_ag_recv net.Conn) func([]byte) (int, error) {
	return func(_b []byte) (n int, err error) {
		return _proxy_1_Write_of(_ag_recv, _b)
	}
}
