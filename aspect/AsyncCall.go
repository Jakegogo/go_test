// Automatically generated by AspectGo (github.com/Jakegogo/aspectgo)
// DO NOT EDIT MANUALLY

package aspect

import "agaspect/testaspect"
import aspectrt "github.com/Jakegogo/aspectgo/aspect/rt"

import (
	"fmt"
	"unsafe"
)

// void SayHello(const char* s);
import "C"
import "go_test/another"

var global int = 3

var global1 int

type Obj struct {
	i int
}

func init() {
	(_aspect_proxy_0_Call_of())(1)
}

func (o *Obj) AsyncCall(i int) (string, int) {
	go (_aspect_proxy_1_Call_of())(1)

	global = 5

	v := &another.GlobalVar1{}
	v.Call()
	go (_aspect_proxy_2_Call_of(v))()

	// go func
	var a = 1
	var c = make(chan map[string]bool, 5)
	go (_aspect_proxy_3_Anonymous_Async_Func_of(func(c chan map[string]bool, param1 int) {
		fmt.Println("async ", a)
	}))(c, 1)
	fmt.Println("sync", a, *((_aspect_proxy_4_global_of(&global))()), (*((_aspect_proxy_5_GlobalVarIns_of(&GlobalVarIns))())).Key, another.GlobalVarIns1, *((_aspect_proxy_6_global1_of(&global1))()), o.i)

	for i = 0; i < 100; i++ {
		go (_aspect_proxy_7_Anonymous_Async_Func_of(func() {}))()
	}

	C.SayHello(C.CString("Hello, World\n"))

	return "123", 0
}

func Call(param1 int) {
	fmt.Println("async ")
	a := another.GlobalVar{}

	b := (*another.GlobalVar1)(unsafe.Pointer(&a))
	fmt.Println(b.KEY1)
}

func _proxy_0_Call_of(_param1 int) {
	_ag_res := (&testaspect.TestAspect{}).Advice(&aspectrt.ContextImpl{XArgs: []interface {
	}{_param1}, XFunc: func(_ag_args []interface {
	}) []interface {
	} {
		_ag_arg0, _ := _ag_args[0].(int)
		Call(_ag_arg0)
		_ag_res := []interface {
		}{}
		return _ag_res
	}, XReceiver: nil})
	_ = _ag_res
	return
}

func _aspect_proxy_0_Call_of() func(int) {
	return func(_param1 int) {
		_proxy_0_Call_of(_param1)
	}
}

func _proxy_1_Call_of(_param1 int) {
	_ag_res := (&testaspect.GlsAspect{}).Advice(&aspectrt.ContextImpl{XArgs: []interface {
	}{_param1}, XFunc: func(_ag_args []interface {
	}) []interface {
	} {
		_ag_arg0, _ := _ag_args[0].(int)
		Call(_ag_arg0)
		_ag_res := []interface {
		}{}
		return _ag_res
	}, XReceiver: nil})
	_ = _ag_res
	return
}

func _aspect_proxy_1_Call_of() func(int) {
	_aspect_async_context := (&testaspect.GlsAspect{}).OnContextGet()
	return func(_param1 int) {
		_aspect_async_context = (&testaspect.GlsAspect{}).OnContextSet(_aspect_async_context)
		defer (&testaspect.GlsAspect{}).OnContextClear(_aspect_async_context)
		_proxy_1_Call_of(_param1)
	}
}

func _proxy_2_Call_of(_ag_recv *another.GlobalVar1) {
	_ag_res := (&testaspect.GlsAspect{}).Advice(&aspectrt.ContextImpl{XArgs: []interface {
	}{}, XFunc: func(_ag_args []interface {
	}) []interface {
	} {
		_ag_recv.Call()
		_ag_res := []interface {
		}{}
		return _ag_res
	}, XReceiver: _ag_recv})
	_ = _ag_res
	return
}

func _aspect_proxy_2_Call_of(_ag_recv *another.GlobalVar1) func() {
	_aspect_async_context := (&testaspect.GlsAspect{}).OnContextGet()
	return func() {
		_aspect_async_context = (&testaspect.GlsAspect{}).OnContextSet(_aspect_async_context)
		defer (&testaspect.GlsAspect{}).OnContextClear(_aspect_async_context)
		_proxy_2_Call_of(_ag_recv)
	}
}

func _proxy_3_Anonymous_Async_Func_of(fun func(_c chan map[string]bool, _param1 int), _c chan map[string]bool, _param1 int) {
	_ag_res := (&testaspect.GlsAspect{}).Advice(&aspectrt.ContextImpl{XArgs: []interface {
	}{_c, _param1}, XFunc: func(_ag_args []interface {
	}) []interface {
	} {
		_ag_arg0, _ := _ag_args[0].(chan map[string]bool)
		_ag_arg1, _ := _ag_args[1].(int)
		fun(_ag_arg0, _ag_arg1)
		_ag_res := []interface {
		}{}
		return _ag_res
	}, XReceiver: nil})
	_ = _ag_res
	return
}

func _aspect_proxy_3_Anonymous_Async_Func_of(fun func(_c chan map[string]bool, _param1 int)) func(chan map[string]bool, int) {
	_aspect_async_context := (&testaspect.GlsAspect{}).OnContextGet()
	return func(_c chan map[string]bool, _param1 int) {
		_aspect_async_context = (&testaspect.GlsAspect{}).OnContextSet(_aspect_async_context)
		defer (&testaspect.GlsAspect{}).OnContextClear(_aspect_async_context)
		_proxy_3_Anonymous_Async_Func_of(fun, _c, _param1)
	}
}

func _proxy_4_global_of(varType string, varOrign *int) (varMock *int) {
	aspect_instance := &testaspect.GlobalVarAspect{}
	aspect_instance.BaseContextAspect.Name = "GlobalVarAspect"
	aspect_instance.BaseContextAspect.OnRecord = aspect_instance.OnRecord
	_ag_res := (aspect_instance).Advice(&aspectrt.ContextImpl{XArgs: []interface {
	}{varType, varOrign}, XFunc: func(_ag_args []interface {
	}) []interface {
	} {
		return []interface {
		}{_ag_args[1]}
	}, XReceiver: nil})
	_ = _ag_res
	_ag_res0, _ := _ag_res[0].(*int)
	return _ag_res0
}

func _aspect_proxy_4_global_of(varOrign *int) func() *int {
	return func() (varMock *int) {
		return _proxy_4_global_of("go_test/aspect.global", varOrign)
	}
}

func _proxy_5_GlobalVarIns_of(varType string, varOrign **another.GlobalVar) (varMock **another.GlobalVar) {
	aspect_instance := &testaspect.GlobalVarAspect{}
	aspect_instance.BaseContextAspect.Name = "GlobalVarAspect"
	aspect_instance.BaseContextAspect.OnRecord = aspect_instance.OnRecord
	_ag_res := (aspect_instance).Advice(&aspectrt.ContextImpl{XArgs: []interface {
	}{varType, varOrign}, XFunc: func(_ag_args []interface {
	}) []interface {
	} {
		return []interface {
		}{_ag_args[1]}
	}, XReceiver: nil})
	_ = _ag_res
	_ag_res0, _ := _ag_res[0].(**another.GlobalVar)
	return _ag_res0
}

func _aspect_proxy_5_GlobalVarIns_of(varOrign **another.GlobalVar) func() **another.GlobalVar {
	return func() (varMock **another.GlobalVar) {
		return _proxy_5_GlobalVarIns_of("go_test/aspect.GlobalVarIns", varOrign)
	}
}

func _proxy_6_global1_of(varType string, varOrign *int) (varMock *int) {
	aspect_instance := &testaspect.GlobalVarAspect{}
	aspect_instance.BaseContextAspect.Name = "GlobalVarAspect"
	aspect_instance.BaseContextAspect.OnRecord = aspect_instance.OnRecord
	_ag_res := (aspect_instance).Advice(&aspectrt.ContextImpl{XArgs: []interface {
	}{varType, varOrign}, XFunc: func(_ag_args []interface {
	}) []interface {
	} {
		return []interface {
		}{_ag_args[1]}
	}, XReceiver: nil})
	_ = _ag_res
	_ag_res0, _ := _ag_res[0].(*int)
	return _ag_res0
}

func _aspect_proxy_6_global1_of(varOrign *int) func() *int {
	return func() (varMock *int) {
		return _proxy_6_global1_of("go_test/aspect.global1", varOrign)
	}
}

func _proxy_7_Anonymous_Async_Func_of(fun func()) {
	_ag_res := (&testaspect.GlsAspect{}).Advice(&aspectrt.ContextImpl{XArgs: []interface {
	}{}, XFunc: func(_ag_args []interface {
	}) []interface {
	} {
		fun()
		_ag_res := []interface {
		}{}
		return _ag_res
	}, XReceiver: nil})
	_ = _ag_res
	return
}

func _aspect_proxy_7_Anonymous_Async_Func_of(fun func()) func() {
	_aspect_async_context := (&testaspect.GlsAspect{}).OnContextGet()
	return func() {
		_aspect_async_context = (&testaspect.GlsAspect{}).OnContextSet(_aspect_async_context)
		defer (&testaspect.GlsAspect{}).OnContextClear(_aspect_async_context)
		_proxy_7_Anonymous_Async_Func_of(fun)
	}
}
