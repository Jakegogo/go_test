// Automatically generated by AspectGo (github.com/Jakegogo/aspectgo)
// DO NOT EDIT MANUALLY

package aspect

import (
	"fmt"
	"unsafe"
)
import "go_test/another"

var global int = 3

var global1 int

type Obj struct {
	i int
}

func (o *Obj) AsyncCall(i int) (string, int) {
	go Call(1)

	// nothing
	global = 5

	// go selector expr
	v := &GlobalVar1{}
	go v.Call()

	// go func
	var a = 1
	var c = make(chan map[string]bool, 5)
	go func(c chan map[string]bool, param1 int) {
		fmt.Println("async ", a)
	}(c, 1)
	fmt.Println("sync", a, global, GlobalVarIns.Key, another.GlobalVarIns1, global1, o.i)
	return "123", 0
}

func Call(param1 int) {
	fmt.Println("async ")
	a := another.GlobalVar{}

	b := (*GlobalVar1)(unsafe.Pointer(&a))
	fmt.Println(b.KEY1)
}

type GlobalVar1 struct {
	KEY1 string
}

func (g *GlobalVar1) Call() {
	fmt.Println("GlobalVar1.Call")
}
